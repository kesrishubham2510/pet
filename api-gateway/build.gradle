plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    // to publish to nexus proxy repo
    id 'maven-publish'
    // to perform sonar analysis of the project
    id "org.sonarqube" version "4.4.1.3373"
}

ext.versions = [
        springBootVersion                : '3.1.4',
        springDependencyManagemnetVersion: '1.1.3',
        modelmapper                      : '3.1.1',
        springdocOpenAPI                 : '1.7.0',
        lombok                           : '1.18.26',
        appVersion                       : '0.0.1',
        group                            : 'com.myreflectionthoughts',
        archTestVersion                  : '1.1.0',
        actuatorVersion                  : '2.7.15'
]

jar {
    enabled = true
}

group = "${versions.group}"
version = "${versions.appVersion}"

java {
    sourceCompatibility = '17'
}

repositories {
    maven {
        url project.property('nexusURL')
        allowInsecureProtocol true

        credentials{
            username property('nexusUsername')
            password property('nexusPassword')
        }
    }
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    implementation "org.modelmapper:modelmapper:${versions.modelmapper}"
    implementation "org.springdoc:springdoc-openapi-webflux-core:${versions.springdocOpenAPI}"
    implementation "org.springdoc:springdoc-openapi-webflux-ui:${versions.springdocOpenAPI}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "org.projectlombok:lombok:${versions.lombok}"
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    testImplementation "com.tngtech.archunit:archunit:${versions.archTestVersion}"
    // dependencies for observability
    implementation "org.springframework.boot:spring-boot-starter-actuator:${versions.actuatorVersion}"
    implementation 'com.myreflectionthoughts:library-pet:0.0.1@jar'
    implementation 'org.springframework.cloud:spring-cloud-contract-wiremock:4.0.4'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.97.Final'

}

tasks.named('test') {
    useJUnitPlatform()
}

sonar{
    /*
        * during configuration phase, Project object has access to the properties
        * Accessing the properties using Project object
    */
    properties{
        property 'sonar.projectKey' , project.property('projectKey')
        property 'sonar.projectName' , project.property('projectName')
        property 'sonar.host.url' , project.property('sonarUrl')
        property 'sonar.token', project.property('projectToken')
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            group "${versions.group}"
            artifact("build/libs/api-gateway-${versions.appVersion}.jar")
        }
    }

    repositories {
        maven {
            // to fetch the properties from the gradle.properties file
            name property('nexusRepoIdentifier')
            url  property('nexusURL')
            allowInsecureProtocol true
            credentials {
                username property('nexusUsername')
                password property('nexusPassword')
            }
        }
    }
}

tasks.named("publishMavenPublicationToNexus-localRepository") {
    dependsOn(tasks.named("jar"))
}

tasks.register('buildDockerImage', Exec) {
    commandLine 'docker', 'build',
            '-t', project.findProperty('projectName'),
            '--build-arg', "projectIdentifier=${project.findProperty('projectName')}",
            '--build-arg', "artifactDirectory=build/libs/api-gateway",
            '--build-arg', "artifactVersion=${versions.appVersion}",
            "/root/.jenkins/workspace/${project.findProperty('projectName')}/${project.findProperty('projectName')}/."

    workingDir '.'
}

tasks.named('buildDockerImage'){
    dependsOn(tasks.named("jar"))
}